package com.etermax.rpg.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.etermax.rpg.definitions.RuleDefinition;
import com.etermax.rpg.exceptions.CharacterNotFoundException;
import com.etermax.rpg.exceptions.GameNotFoundException;
import com.etermax.rpg.model.Game;
import com.etermax.rpg.model.IRule;
import com.etermax.rpg.services.GameService;
import com.etermax.rpg.utils.Utils;
import com.etermax.rpg.model.Character;

@RestController
@RequestMapping(value = "/api/game/")
public class GameController {

	@Autowired
	private GameService gameService;

	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	/* POST /game/ */
	@RequestMapping(method = RequestMethod.POST)
	public Game newGame() {
		logger.info("Creating game");
		return gameService.newGame();
	}

	/* GET /game/GAME */
	@RequestMapping(value = "/{gameId}", method = RequestMethod.GET)
	public Game getGame(@PathVariable String gameId) throws GameNotFoundException {
		return gameService.getGame(gameId);
	}

	/* PUT /game/GAME */
	@RequestMapping(value = "/{gameId}", method = RequestMethod.PUT)
	public Game updateGame(@PathVariable String gameId, @RequestBody Game game) {
		gameService.updateGame(game);
		return game;
	}


	/* Attack /game/GAME/CHARACTER */
	@RequestMapping(value = "/{gameId}/{characterId}", method = RequestMethod.POST)
	public void attackCharacter(@PathVariable String gameId, @PathVariable String characterId)
			throws GameNotFoundException, CharacterNotFoundException {
		Game game = gameService.getGame(gameId);
		game.initializeCharactersMap();
		Character character = game.getCharacterById(characterId);

		ArrayList<Character> characters = game.getCharacters();
		ArrayList<RuleDefinition> rules = game.getRules().getRules();

		for (Character characterToReview : characters) {

			if(characterToReview.isDeath())
				continue;
			
			if (!Utils.containSomeElement(character.getFactions(), characterToReview.getFactions())) {

				for (RuleDefinition rule : rules) {
					if (character.getId() != characterToReview.getId()) {
						if (rule.isInRange(character.getPosition(), characterToReview.getPosition())) {
							if ((characterToReview.getLevel() - character.getLevel()) >= 5) {
								characterToReview.damage(1);
							} else {
								characterToReview.damage(3);
							}
						}
					}
				}
			}
		}
	}
	
	/* Attack /game/removefaction/GAME/CHARACTER */
	@RequestMapping(value = "removefaction/{gameId}/{characterId}/{factionId}", method = RequestMethod.POST)
	public void removeFactionCharacter(@PathVariable String gameId, @PathVariable String characterId, @PathVariable String factionId)
			throws GameNotFoundException, CharacterNotFoundException {
		Game game = gameService.getGame(gameId);
		game.initializeCharactersMap();
		Character character = game.getCharacterById(characterId);

		List<String> factions = character.getFactions();
		factions.remove(factionId);
		character.setFactions(factions);
		
		gameService.updateGame(game);
	}
}
